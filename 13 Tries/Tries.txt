Important data structure for pattern matching problems.
Prefix Trie
- Generic tree like data structure
- Efficient information retrieval data structure
- Searches in optimal time O(key length) but uses extra storage.
- Important operations:
    * insert
    * Search
- It storages common prefixes in the same "branch"
- The shape or the structure will depend upon what data
has been inserted, the order of insertion of different 
strings doesn't matter in case of trie.
- success alert
Good job!
Looking up data in a trie is faster in the worst case, 
O(m) time . The worst-case lookup speed in an imperfect 
hash table is O(N) time, but far more typically is O(1),
 with O(m) time spent evaluating the hash.
- True as memory may be allocated for each character in
the search string, rather than a single chunk of memory 
for the whole entry, as in most hash tables. Also for 
each character creating a node takes more memory than 
storing the string directly..

Sample Problem - given a list of strings and Q queries, 
each query containing a word, you have to tell whether 
the word is contained in the list or not.
